

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Sat Apr 09 22:48:28 2016

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    16                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    17  0000                     _TMR0	set	4054
    18  0000                     _TMR1	set	4046
    19  0000                     _BAUDCON2bits	set	3952
    20  0000                     _INTCONbits	set	4082
    21  0000                     _LATAbits	set	3977
    22  0000                     _LATCbits	set	3979
    23  0000                     _OSCCONbits	set	4051
    24  0000                     _OSCTUNEbits	set	3995
    25  0000                     _PIE1bits	set	3997
    26  0000                     _PIR1bits	set	3998
    27  0000                     _PIR3bits	set	4004
    28  0000                     _RCREG2	set	3956
    29  0000                     _RCSTA2bits	set	3953
    30  0000                     _SPBRG2	set	3957
    31  0000                     _T0CON	set	4053
    32  0000                     _T0CONbits	set	4053
    33  0000                     _T1CONbits	set	4045
    34  0000                     _TMR0L	set	4054
    35  0000                     _TRISAbits	set	3986
    36  0000                     _TRISCbits	set	3988
    37  0000                     _TX2REG	set	3955
    38  0000                     _TXSTA2bits	set	3954
    39  0000                     _TX2IF	set	32036
    40                           
    41                           	psect	smallconst
    42  001000                     __psmallconst:
    43                           	opt stack 0
    44  001000  00                 	db	0
    45  001001                     STR_2:
    46  001001  2D                 	db	45
    47  001002  2D                 	db	45
    48  001003  2D                 	db	45
    49  001004  2D                 	db	45
    50  001005  2D                 	db	45
    51  001006  2D                 	db	45
    52  001007  2D                 	db	45
    53  001008  2D                 	db	45
    54  001009  2D                 	db	45
    55  00100A  2D                 	db	45
    56  00100B  2D                 	db	45
    57  00100C  2D                 	db	45
    58  00100D  2D                 	db	45
    59  00100E  48                 	db	72	;'H'
    60  00100F  45                 	db	69	;'E'
    61  001010  4C                 	db	76	;'L'
    62  001011  50                 	db	80	;'P'
    63  001012  2D                 	db	45
    64  001013  2D                 	db	45
    65  001014  2D                 	db	45
    66  001015  2D                 	db	45
    67  001016  2D                 	db	45
    68  001017  2D                 	db	45
    69  001018  2D                 	db	45
    70  001019  2D                 	db	45
    71  00101A  2D                 	db	45
    72  00101B  2D                 	db	45
    73  00101C  2D                 	db	45
    74  00101D  2D                 	db	45
    75  00101E  0D                 	db	13
    76  00101F  0A                 	db	10
    77  001020  00                 	db	0
    78  001021                     STR_6:
    79  001021  6C                 	db	108	;'l'
    80  001022  69                 	db	105	;'i'
    81  001023  67                 	db	103	;'g'
    82  001024  68                 	db	104	;'h'
    83  001025  74                 	db	116	;'t'
    84  001026  20                 	db	32
    85  001027  73                 	db	115	;'s'
    86  001028  68                 	db	104	;'h'
    87  001029  6F                 	db	111	;'o'
    88  00102A  75                 	db	117	;'u'
    89  00102B  6C                 	db	108	;'l'
    90  00102C  64                 	db	100	;'d'
    91  00102D  20                 	db	32
    92  00102E  62                 	db	98	;'b'
    93  00102F  65                 	db	101	;'e'
    94  001030  20                 	db	32
    95  001031  6F                 	db	111	;'o'
    96  001032  6E                 	db	110	;'n'
    97  001033  00                 	db	0
    98  001034                     STR_7:
    99  001034  55                 	db	85	;'U'
   100  001035  6E                 	db	110	;'n'
   101  001036  6B                 	db	107	;'k'
   102  001037  6E                 	db	110	;'n'
   103  001038  6F                 	db	111	;'o'
   104  001039  77                 	db	119	;'w'
   105  00103A  6E                 	db	110	;'n'
   106  00103B  20                 	db	32
   107  00103C  6B                 	db	107	;'k'
   108  00103D  65                 	db	101	;'e'
   109  00103E  79                 	db	121	;'y'
   110  00103F  20                 	db	32
   111  001040  25                 	db	37
   112  001041  63                 	db	99	;'c'
   113  001042  0D                 	db	13
   114  001043  0A                 	db	10
   115  001044  00                 	db	0
   116  001045                     STR_3:
   117  001045  3F                 	db	63	;'?'
   118  001046  3A                 	db	58	;':'
   119  001047  20                 	db	32
   120  001048  68                 	db	104	;'h'
   121  001049  65                 	db	101	;'e'
   122  00104A  6C                 	db	108	;'l'
   123  00104B  70                 	db	112	;'p'
   124  00104C  20                 	db	32
   125  00104D  6D                 	db	109	;'m'
   126  00104E  65                 	db	101	;'e'
   127  00104F  6E                 	db	110	;'n'
   128  001050  75                 	db	117	;'u'
   129  001051  0D                 	db	13
   130  001052  0A                 	db	10
   131  001053  00                 	db	0
   132  001054                     STR_5:
   133  001054  6F                 	db	111	;'o'
   134  001055  3A                 	db	58	;':'
   135  001056  09                 	db	9
   136  001057  6F                 	db	111	;'o'
   137  001058  6B                 	db	107	;'k'
   138  001059  0D                 	db	13
   139  00105A  0A                 	db	10
   140  00105B  00                 	db	0
   141  00105C                     STR_4:
   142  00105C  6F                 	db	111	;'o'
   143  00105D  3A                 	db	58	;':'
   144  00105E  20                 	db	32
   145  00105F  6B                 	db	107	;'k'
   146  001060  0D                 	db	13
   147  001061  0A                 	db	10
   148  001062  00                 	db	0
   149  001063                     STR_8:
   150  001063  3E                 	db	62	;'>'
   151  001064  20                 	db	32
   152  001065  00                 	db	0
   153  0000                     
   154                           ; #config settings
   155  001066  00                 	db	0	; dummy byte at the end
   156  0000                     
   157                           	psect	cinit
   158  00121A                     __pcinit:
   159                           	opt stack 0
   160  00121A                     start_initialization:
   161                           	opt stack 0
   162  00121A                     __initialization:
   163                           	opt stack 0
   164                           
   165                           ; Clear objects allocated to COMRAM (8 bytes)
   166  00121A  EE00  F01F         	lfsr	0,__pbssCOMRAM
   167  00121E  0E08               	movlw	8
   168  001220                     clear_0:
   169  001220  6AEE               	clrf	postinc0,c
   170  001222  06E8               	decf	wreg,f,c
   171  001224  E1FD               	bnz	clear_0
   172  001226                     end_of_initialization:
   173                           	opt stack 0
   174  001226                     __end_of__initialization:
   175                           	opt stack 0
   176  001226  9027               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   177  001228  9227               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   178  00122A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   179  00122C  6EF8               	movwf	tblptru,c
   180  00122E  0100               	movlb	0
   181  001230  EF34  F008         	goto	_main	;jump to C main() function
   182                           tblptru	equ	0xFF8
   183                           postinc0	equ	0xFEE
   184                           wreg	equ	0xFE8
   185                           
   186                           	psect	bssCOMRAM
   187  00001F                     __pbssCOMRAM:
   188                           	opt stack 0
   189  00001F                     _duty_cycle:
   190                           	opt stack 0
   191  00001F                     	ds	4
   192  000023                     _pwm_channel:
   193                           	opt stack 0
   194  000023                     	ds	4
   195                           tblptru	equ	0xFF8
   196                           postinc0	equ	0xFEE
   197                           wreg	equ	0xFE8
   198                           
   199                           	psect	cstackCOMRAM
   200  000001                     __pcstackCOMRAM:
   201                           	opt stack 0
   202  000001                     ??_ISR:
   203  000001                     
   204                           ; 1 bytes @ 0x0
   205  000001                     	ds	17
   206  000012                     ISR@i:
   207                           	opt stack 0
   208                           
   209                           ; 2 bytes @ 0x11
   210  000012                     	ds	2
   211  000014                     putch@c:
   212                           	opt stack 0
   213                           
   214                           ; 1 bytes @ 0x13
   215  000014                     	ds	1
   216  000015                     ?_printf:
   217                           	opt stack 0
   218  000015                     printf@f:
   219                           	opt stack 0
   220                           
   221                           ; 2 bytes @ 0x14
   222  000015                     	ds	4
   223  000019                     printf@flag:
   224                           	opt stack 0
   225                           
   226                           ; 1 bytes @ 0x18
   227  000019                     	ds	1
   228  00001A                     printf@ap:
   229                           	opt stack 0
   230                           
   231                           ; 2 bytes @ 0x19
   232  00001A                     	ds	2
   233  00001C                     printf@c:
   234                           	opt stack 0
   235                           
   236                           ; 1 bytes @ 0x1B
   237  00001C                     	ds	1
   238  00001D                     main@direction_state:
   239                           	opt stack 0
   240                           
   241                           ; 1 bytes @ 0x1C
   242  00001D                     	ds	1
   243  00001E                     main@direction:
   244                           	opt stack 0
   245                           
   246                           ; 1 bytes @ 0x1D
   247  00001E                     	ds	1
   248                           tblptru	equ	0xFF8
   249                           postinc0	equ	0xFEE
   250                           wreg	equ	0xFE8
   251                           
   252 ;;
   253 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   254 ;;
   255 ;; *************** function _main *****************
   256 ;; Defined at:
   257 ;;		line 96 in file "bitbang.c"
   258 ;; Parameters:    Size  Location     Type
   259 ;;		None
   260 ;; Auto vars:     Size  Location     Type
   261 ;;  direction       1   29[COMRAM] unsigned char 
   262 ;;  direction_st    1   28[COMRAM] unsigned char 
   263 ;; Return value:  Size  Location     Type
   264 ;;                  1    wreg      void 
   265 ;; Registers used:
   266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   267 ;; Tracked objects:
   268 ;;		On entry : 0/0
   269 ;;		On exit  : 0/0
   270 ;;		Unchanged: 0/0
   271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   273 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   275 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   276 ;;Total ram usage:        2 bytes
   277 ;; Hardware stack levels required when called:    3
   278 ;; This function calls:
   279 ;;		_INIT_PIC
   280 ;;		_printf
   281 ;; This function is called by:
   282 ;;		Startup code after reset
   283 ;; This function uses a non-reentrant model
   284 ;;
   285                           
   286                           	psect	text0
   287  001068                     __ptext0:
   288                           	opt stack 0
   289  001068                     _main:
   290                           	opt stack 28
   291                           
   292                           ;bitbang.c: 99: char direction = 'f';
   293                           
   294                           ;incstack = 0
   295  001068  0E66               	movlw	102
   296  00106A  6E1E               	movwf	main@direction,c
   297                           
   298                           ;bitbang.c: 100: int8 direction_state = 1;
   299  00106C  0E01               	movlw	1
   300  00106E  6E1D               	movwf	main@direction_state,c
   301                           
   302                           ;bitbang.c: 102: INIT_PIC();
   303  001070  ECE5  F008         	call	_INIT_PIC	;wreg free
   304                           
   305                           ;bitbang.c: 111: duty_cycle[0] = 45;
   306  001074  0E2D               	movlw	45
   307  001076  6E1F               	movwf	_duty_cycle,c
   308                           
   309                           ;bitbang.c: 112: duty_cycle[1] = 45;
   310  001078  0E2D               	movlw	45
   311  00107A  6E20               	movwf	_duty_cycle+1,c
   312                           
   313                           ;bitbang.c: 113: duty_cycle[2] = 45;
   314  00107C  0E2D               	movlw	45
   315  00107E  D057               	goto	L1
   316  001080                     l924:
   317                           
   318                           ;bitbang.c: 114: duty_cycle[3] = 45;
   319  001080  0E2D               	movlw	45
   320  001082  6E22               	movwf	_duty_cycle+3,c
   321  001084                     l926:
   322                           
   323                           ;bitbang.c: 118: if (PIR3bits.RC2IF) {
   324  001084  AAA4               	btfss	4004,5,c	;volatile
   325  001086  D7FE               	goto	l926
   326                           
   327                           ;bitbang.c: 119: PIR3bits.RC2IF = 0;
   328  001088  9AA4               	bcf	4004,5,c	;volatile
   329                           
   330                           ;bitbang.c: 122: switch (RCREG2) {
   331  00108A  D032               	goto	l942
   332  00108C                     l930:
   333                           
   334                           ;bitbang.c: 128: printf("\r\n");
   335  00108C  0E1E               	movlw	low (STR_2+29)
   336  00108E  6E15               	movwf	printf@f,c
   337  001090  0E10               	movlw	high (STR_2+29)
   338  001092  6E16               	movwf	printf@f+1,c
   339  001094  ECA9  F008         	call	_printf	;wreg free
   340                           
   341                           ;bitbang.c: 129: printf("-------------HELP------------\r\n");
   342  001098  0E01               	movlw	low STR_2
   343  00109A  6E15               	movwf	printf@f,c
   344  00109C  0E10               	movlw	high STR_2
   345  00109E  6E16               	movwf	printf@f+1,c
   346  0010A0  ECA9  F008         	call	_printf	;wreg free
   347                           
   348                           ;bitbang.c: 130: printf("?: help menu\r\n");
   349  0010A4  0E45               	movlw	low STR_3
   350  0010A6  6E15               	movwf	printf@f,c
   351  0010A8  0E10               	movlw	high STR_3
   352  0010AA  6E16               	movwf	printf@f+1,c
   353  0010AC  ECA9  F008         	call	_printf	;wreg free
   354                           
   355                           ;bitbang.c: 131: printf("o: k\r\n");
   356  0010B0  0E5C               	movlw	low STR_4
   357  0010B2  6E15               	movwf	printf@f,c
   358  0010B4  0E10               	movlw	high STR_4
   359  0010B6  6E16               	movwf	printf@f+1,c
   360  0010B8  ECA9  F008         	call	_printf	;wreg free
   361                           
   362                           ;bitbang.c: 132: break;
   363  0010BC  D024               	goto	l944
   364  0010BE                     l932:
   365                           
   366                           ;bitbang.c: 138: printf("o:	ok\r\n");
   367  0010BE  0E54               	movlw	low STR_5
   368  0010C0  6E15               	movwf	printf@f,c
   369  0010C2  0E10               	movlw	high STR_5
   370  0010C4  6E16               	movwf	printf@f+1,c
   371  0010C6  ECA9  F008         	call	_printf	;wreg free
   372                           
   373                           ;bitbang.c: 139: break;
   374  0010CA  D01D               	goto	l944
   375  0010CC                     l934:
   376                           
   377                           ;bitbang.c: 145: printf("light should be on");
   378  0010CC  0E21               	movlw	low STR_6
   379  0010CE  6E15               	movwf	printf@f,c
   380  0010D0  0E10               	movlw	high STR_6
   381  0010D2  6E16               	movwf	printf@f+1,c
   382  0010D4  ECA9  F008         	call	_printf	;wreg free
   383                           
   384                           ;bitbang.c: 146: LATCbits.LATC1 ^= 1;
   385  0010D8  728B               	btg	3979,1,c	;volatile
   386                           
   387                           ;bitbang.c: 147: break;
   388  0010DA  D015               	goto	l944
   389  0010DC                     l938:
   390                           
   391                           ;bitbang.c: 152: printf("Unknown key %c\r\n",RCREG2);
   392  0010DC  0E34               	movlw	low STR_7
   393  0010DE  6E15               	movwf	printf@f,c
   394  0010E0  0E10               	movlw	high STR_7
   395  0010E2  6E16               	movwf	printf@f+1,c
   396  0010E4  CF74 F017          	movff	3956,?_printf+2	;volatile
   397  0010E8  6A18               	clrf	?_printf+3,c
   398  0010EA  ECA9  F008         	call	_printf	;wreg free
   399                           
   400                           ;bitbang.c: 155: }
   401                           
   402                           ;bitbang.c: 153: break;
   403  0010EE  D00B               	goto	l944
   404  0010F0                     l942:
   405  0010F0  5074               	movf	3956,w,c	;volatile
   406                           
   407                           ; Switch size 1, requested type "space"
   408                           ; Number of cases is 3, Range of values is 63 to 111
   409                           ; switch strategies available:
   410                           ; Name         Instructions Cycles
   411                           ; simple_byte           10     6 (average)
   412                           ;	Chosen strategy is simple_byte
   413  0010F2  0A3F               	xorlw	63	; case 63
   414  0010F4  B4D8               	btfsc	status,2,c
   415  0010F6  D7CA               	goto	l930
   416  0010F8  0A56               	xorlw	86	; case 105
   417  0010FA  B4D8               	btfsc	status,2,c
   418  0010FC  D7E7               	goto	l934
   419  0010FE  0A06               	xorlw	6	; case 111
   420  001100  B4D8               	btfsc	status,2,c
   421  001102  D7DD               	goto	l932
   422  001104  D7EB               	goto	l938
   423  001106                     l944:
   424                           
   425                           ;bitbang.c: 156: printf("> ");
   426  001106  0E63               	movlw	low STR_8
   427  001108  6E15               	movwf	printf@f,c
   428  00110A  0E10               	movlw	high STR_8
   429  00110C  6E16               	movwf	printf@f+1,c
   430  00110E  ECA9  F008         	call	_printf	;wreg free
   431                           
   432                           ;bitbang.c: 159: switch(direction){
   433  001112  D017               	goto	l956
   434  001114                     l946:
   435                           
   436                           ;bitbang.c: 166: if(direction_state = 0){
   437  001114  0E00               	movlw	0
   438  001116  6E1D               	movwf	main@direction_state,c
   439                           
   440                           ;bitbang.c: 172: else{
   441                           ;bitbang.c: 173: duty_cycle[0] = 45;
   442                           
   443                           ;bitbang.c: 171: }
   444                           
   445                           ;bitbang.c: 170: duty_cycle[3] = 45;
   446                           
   447                           ;bitbang.c: 169: duty_cycle[2] = 180;
   448                           
   449                           ;bitbang.c: 168: duty_cycle[1] = 45;
   450                           
   451                           ;bitbang.c: 167: duty_cycle[0] = 180;
   452  001118  0E2D               	movlw	45
   453  00111A  6E1F               	movwf	_duty_cycle,c
   454                           
   455                           ;bitbang.c: 174: duty_cycle[1] = 180;
   456  00111C  0EB4               	movlw	180
   457  00111E  6E20               	movwf	_duty_cycle+1,c
   458                           
   459                           ;bitbang.c: 175: duty_cycle[2] = 45;
   460  001120  0E2D               	movlw	45
   461  001122  6E21               	movwf	_duty_cycle+2,c
   462                           
   463                           ;bitbang.c: 176: duty_cycle[3] = 180;
   464  001124  0EB4               	movlw	180
   465  001126  6E22               	movwf	_duty_cycle+3,c
   466  001128                     l69:
   467                           
   468                           ;bitbang.c: 184: if(direction_state = 0){
   469  001128  0E00               	movlw	0
   470  00112A  6E1D               	movwf	main@direction_state,c
   471  00112C  D002               	goto	l954
   472  00112E                     L1:
   473  00112E  6E21               	movwf	_duty_cycle+2,c
   474  001130  D7A7               	goto	l924
   475  001132                     l954:
   476                           
   477                           ;bitbang.c: 190: else{
   478                           ;bitbang.c: 191: duty_cycle[0] = 45;
   479  001132  0E2D               	movlw	45
   480  001134  6E1F               	movwf	_duty_cycle,c
   481                           
   482                           ;bitbang.c: 192: duty_cycle[1] = 180;
   483  001136  0EB4               	movlw	180
   484  001138  6E20               	movwf	_duty_cycle+1,c
   485                           
   486                           ;bitbang.c: 193: duty_cycle[2] = 45;
   487  00113A  0E2D               	movlw	45
   488  00113C  6E21               	movwf	_duty_cycle+2,c
   489                           
   490                           ;bitbang.c: 194: duty_cycle[3] = 180;
   491  00113E  0EB4               	movlw	180
   492  001140  D7A0               	goto	L3
   493  001142                     l956:
   494  001142  501E               	movf	main@direction,w,c
   495                           
   496                           ; Switch size 1, requested type "space"
   497                           ; Number of cases is 2, Range of values is 102 to 114
   498                           ; switch strategies available:
   499                           ; Name         Instructions Cycles
   500                           ; simple_byte            7     4 (average)
   501                           ;	Chosen strategy is simple_byte
   502  001144  0A66               	xorlw	102	; case 102
   503  001146  B4D8               	btfsc	status,2,c
   504  001148  D7E5               	goto	l946
   505  00114A  0A14               	xorlw	20	; case 114
   506  00114C  B4D8               	btfsc	status,2,c
   507  00114E  D7EC               	goto	l69
   508  001150  D799               	goto	l926
   509  001152                     __end_of_main:
   510                           	opt stack 0
   511                           tblptru	equ	0xFF8
   512                           postinc0	equ	0xFEE
   513                           wreg	equ	0xFE8
   514                           status	equ	0xFD8
   515                           
   516 ;; *************** function _printf *****************
   517 ;; Defined at:
   518 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\doprnt.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;  f               2   20[COMRAM] PTR const unsigned char 
   521 ;;		 -> STR_8(3), STR_7(17), STR_6(19), STR_5(8), 
   522 ;;		 -> STR_4(7), STR_3(15), STR_2(32), STR_1(3), 
   523 ;; Auto vars:     Size  Location     Type
   524 ;;  tmpval          4    0        struct .
   525 ;;  cp              3    0        PTR const unsigned char 
   526 ;;  ap              2   25[COMRAM] PTR void [1]
   527 ;;		 -> ?_printf(2), 
   528 ;;  len             2    0        unsigned int 
   529 ;;  val             2    0        unsigned int 
   530 ;;  c               1   27[COMRAM] char 
   531 ;;  flag            1   24[COMRAM] unsigned char 
   532 ;;  prec            1    0        char 
   533 ;; Return value:  Size  Location     Type
   534 ;;                  2   20[COMRAM] int 
   535 ;; Registers used:
   536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   537 ;; Tracked objects:
   538 ;;		On entry : 0/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   542 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   543 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   545 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   546 ;;Total ram usage:        8 bytes
   547 ;; Hardware stack levels used:    1
   548 ;; Hardware stack levels required when called:    2
   549 ;; This function calls:
   550 ;;		_putch
   551 ;; This function is called by:
   552 ;;		_main
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556                           	psect	text1
   557  001152                     __ptext1:
   558                           	opt stack 0
   559  001152                     _printf:
   560                           	opt stack 28
   561                           
   562                           ;doprnt.c: 466: va_list ap;
   563                           ;doprnt.c: 499: signed char c;
   564                           ;doprnt.c: 506: signed char prec;
   565                           ;doprnt.c: 508: unsigned char flag;
   566                           ;doprnt.c: 523: union {
   567                           ;doprnt.c: 524: unsigned long vd;
   568                           ;doprnt.c: 525: double integ;
   569                           ;doprnt.c: 526: } tmpval;
   570                           ;doprnt.c: 528: unsigned int val;
   571                           ;doprnt.c: 529: unsigned len;
   572                           ;doprnt.c: 530: const char * cp;
   573                           ;doprnt.c: 533: *ap = __va_start();
   574                           
   575                           ;incstack = 0
   576  001152  0E17               	movlw	low (?_printf+2)
   577  001154  6E1A               	movwf	printf@ap,c
   578  001156  0E00               	movlw	high (?_printf+2)
   579  001158  6E1B               	movwf	printf@ap+1,c
   580                           
   581                           ;doprnt.c: 536: while(c = *f++) {
   582  00115A  D02A               	goto	l912
   583  00115C                     l896:
   584                           
   585                           ;doprnt.c: 538: if(c != '%')
   586  00115C  0E25               	movlw	37
   587  00115E  181C               	xorwf	printf@c,w,c
   588  001160  B4D8               	btfsc	status,2,c
   589  001162  D004               	goto	l900
   590                           
   591                           ;doprnt.c: 540: {
   592                           ;doprnt.c: 541: (putch(c) );
   593  001164  501C               	movf	printf@c,w,c
   594  001166  EC1A  F009         	call	_putch
   595                           
   596                           ;doprnt.c: 542: continue;
   597  00116A  D022               	goto	l912
   598  00116C                     l900:
   599                           
   600                           ;doprnt.c: 543: }
   601                           ;doprnt.c: 548: flag = 0;
   602  00116C  0E00               	movlw	0
   603  00116E  6E19               	movwf	printf@flag,c
   604                           
   605                           ;doprnt.c: 635: switch(c = *f++) {
   606  001170  D00E               	goto	l910
   607  001172                     l902:
   608                           
   609                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
   610  001172  C01A  FFD9         	movff	printf@ap,fsr2l
   611  001176  C01B  FFDA         	movff	printf@ap+1,fsr2h
   612  00117A  50DF               	movf	indf2,w,c
   613  00117C  6E1C               	movwf	printf@c,c
   614  00117E  0E02               	movlw	2
   615  001180  261A               	addwf	printf@ap,f,c
   616  001182  0E00               	movlw	0
   617  001184  221B               	addwfc	printf@ap+1,f,c
   618  001186                     l906:
   619                           
   620                           ;doprnt.c: 809: (putch(c) );
   621  001186  501C               	movf	printf@c,w,c
   622  001188  EC1A  F009         	call	_putch
   623                           
   624                           ;doprnt.c: 822: }
   625                           
   626                           ;doprnt.c: 810: continue;
   627  00118C  D011               	goto	l912
   628  00118E                     l910:
   629  00118E  C015  FFF6         	movff	printf@f,tblptrl
   630  001192  C016  FFF7         	movff	printf@f+1,tblptrh
   631  001196  4A15               	infsnz	printf@f,f,c
   632  001198  2A16               	incf	printf@f+1,f,c
   633  00119A                     	if	0	;tblptru may be non-zero
   634  00119A                     	endif
   635  00119A                     	if	0	;tblptru may be non-zero
   636  00119A                     	endif
   637  00119A  0008               	tblrd		*
   638  00119C  CFF5 F01C          	movff	tablat,printf@c
   639  0011A0  501C               	movf	printf@c,w,c
   640                           
   641                           ; Switch size 1, requested type "space"
   642                           ; Number of cases is 2, Range of values is 0 to 99
   643                           ; switch strategies available:
   644                           ; Name         Instructions Cycles
   645                           ; simple_byte            7     4 (average)
   646                           ;	Chosen strategy is simple_byte
   647  0011A2  0A00               	xorlw	0	; case 0
   648  0011A4  B4D8               	btfsc	status,2,c
   649  0011A6  0012               	return	
   650  0011A8  0A63               	xorlw	99	; case 99
   651  0011AA  B4D8               	btfsc	status,2,c
   652  0011AC  D7E2               	goto	l902
   653  0011AE  D7EB               	goto	l906
   654  0011B0                     l912:
   655  0011B0  C015  FFF6         	movff	printf@f,tblptrl
   656  0011B4  C016  FFF7         	movff	printf@f+1,tblptrh
   657  0011B8  4A15               	infsnz	printf@f,f,c
   658  0011BA  2A16               	incf	printf@f+1,f,c
   659  0011BC                     	if	0	;tblptru may be non-zero
   660  0011BC                     	endif
   661  0011BC                     	if	0	;tblptru may be non-zero
   662  0011BC                     	endif
   663  0011BC  0008               	tblrd		*
   664  0011BE  CFF5 F01C          	movff	tablat,printf@c
   665  0011C2  501C               	movf	printf@c,w,c
   666  0011C4  B4D8               	btfsc	status,2,c
   667  0011C6  0012               	return	
   668  0011C8  D7C9               	goto	l896
   669  0011CA                     __end_of_printf:
   670                           	opt stack 0
   671                           tblptru	equ	0xFF8
   672                           tblptrh	equ	0xFF7
   673                           tblptrl	equ	0xFF6
   674                           tablat	equ	0xFF5
   675                           postinc0	equ	0xFEE
   676                           wreg	equ	0xFE8
   677                           indf2	equ	0xFDF
   678                           fsr2h	equ	0xFDA
   679                           fsr2l	equ	0xFD9
   680                           status	equ	0xFD8
   681                           
   682 ;; *************** function _putch *****************
   683 ;; Defined at:
   684 ;;		line 324 in file "bitbang.c"
   685 ;; Parameters:    Size  Location     Type
   686 ;;  c               1    wreg     unsigned char 
   687 ;; Auto vars:     Size  Location     Type
   688 ;;  c               1   19[COMRAM] unsigned char 
   689 ;; Return value:  Size  Location     Type
   690 ;;                  1    wreg      void 
   691 ;; Registers used:
   692 ;;		wreg
   693 ;; Tracked objects:
   694 ;;		On entry : 0/0
   695 ;;		On exit  : 0/0
   696 ;;		Unchanged: 0/0
   697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   699 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   701 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   702 ;;Total ram usage:        1 bytes
   703 ;; Hardware stack levels used:    1
   704 ;; Hardware stack levels required when called:    1
   705 ;; This function calls:
   706 ;;		Nothing
   707 ;; This function is called by:
   708 ;;		_printf
   709 ;; This function uses a non-reentrant model
   710 ;;
   711                           
   712                           	psect	text2
   713  001234                     __ptext2:
   714                           	opt stack 0
   715  001234                     _putch:
   716                           	opt stack 28
   717                           
   718                           ;incstack = 0
   719                           ;putch@c stored from wreg
   720  001234  6E14               	movwf	putch@c,c
   721  001236                     l100:
   722  001236  A8A4               	btfss	4004,4,c	;volatile
   723  001238  D7FE               	goto	l100
   724                           
   725                           ;bitbang.c: 328: TX2REG = c;
   726  00123A  C014  FF73         	movff	putch@c,3955	;volatile
   727  00123E  0012               	return		;funcret
   728  001240                     __end_of_putch:
   729                           	opt stack 0
   730                           tblptru	equ	0xFF8
   731                           tblptrh	equ	0xFF7
   732                           tblptrl	equ	0xFF6
   733                           tablat	equ	0xFF5
   734                           postinc0	equ	0xFEE
   735                           wreg	equ	0xFE8
   736                           indf2	equ	0xFDF
   737                           fsr2h	equ	0xFDA
   738                           fsr2l	equ	0xFD9
   739                           status	equ	0xFD8
   740                           
   741 ;; *************** function _INIT_PIC *****************
   742 ;; Defined at:
   743 ;;		line 215 in file "bitbang.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;		None
   746 ;; Auto vars:     Size  Location     Type
   747 ;;		None
   748 ;; Return value:  Size  Location     Type
   749 ;;                  1    wreg      void 
   750 ;; Registers used:
   751 ;;		wreg, status,2
   752 ;; Tracked objects:
   753 ;;		On entry : 0/0
   754 ;;		On exit  : 0/0
   755 ;;		Unchanged: 0/0
   756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   761 ;;Total ram usage:        0 bytes
   762 ;; Hardware stack levels used:    1
   763 ;; Hardware stack levels required when called:    1
   764 ;; This function calls:
   765 ;;		Nothing
   766 ;; This function is called by:
   767 ;;		_main
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           	psect	text3
   772  0011CA                     __ptext3:
   773                           	opt stack 0
   774  0011CA                     _INIT_PIC:
   775                           	opt stack 29
   776                           
   777                           ;bitbang.c: 217: OSCCONbits.IRCF2 = 1;
   778                           
   779                           ;incstack = 0
   780  0011CA  8CD3               	bsf	4051,6,c	;volatile
   781                           
   782                           ;bitbang.c: 218: OSCCONbits.IRCF1 = 1;
   783  0011CC  8AD3               	bsf	4051,5,c	;volatile
   784                           
   785                           ;bitbang.c: 219: OSCCONbits.IRCF0 = 1;
   786  0011CE  88D3               	bsf	4051,4,c	;volatile
   787                           
   788                           ;bitbang.c: 220: OSCTUNEbits.PLLEN = 1;
   789  0011D0  8C9B               	bsf	3995,6,c	;volatile
   790                           
   791                           ;bitbang.c: 226: TXSTA2bits.TXEN = 1;
   792  0011D2  8A72               	bsf	3954,5,c	;volatile
   793                           
   794                           ;bitbang.c: 227: TXSTA2bits.SYNC = 0;
   795  0011D4  9872               	bcf	3954,4,c	;volatile
   796                           
   797                           ;bitbang.c: 228: TXSTA2bits.BRGH = 0;
   798  0011D6  9472               	bcf	3954,2,c	;volatile
   799                           
   800                           ;bitbang.c: 229: BAUDCON2bits.BRG16 = 0;
   801  0011D8  9670               	bcf	3952,3,c	;volatile
   802                           
   803                           ;bitbang.c: 230: RCSTA2bits.CREN = 1;
   804  0011DA  8871               	bsf	3953,4,c	;volatile
   805                           
   806                           ;bitbang.c: 231: SPBRG2 = 104;
   807  0011DC  0E68               	movlw	104
   808  0011DE  6E75               	movwf	3957,c	;volatile
   809                           
   810                           ;bitbang.c: 232: RCSTA2bits.SPEN = 1;
   811  0011E0  8E71               	bsf	3953,7,c	;volatile
   812                           
   813                           ;bitbang.c: 235: TRISCbits.TRISC1 = 0;
   814  0011E2  9294               	bcf	3988,1,c	;volatile
   815                           
   816                           ;bitbang.c: 236: TRISAbits.TRISA0 = 0;
   817  0011E4  9092               	bcf	3986,0,c	;volatile
   818                           
   819                           ;bitbang.c: 237: TRISAbits.TRISA1 = 0;
   820  0011E6  9292               	bcf	3986,1,c	;volatile
   821                           
   822                           ;bitbang.c: 238: TRISAbits.TRISA2 = 0;
   823  0011E8  9492               	bcf	3986,2,c	;volatile
   824                           
   825                           ;bitbang.c: 239: TRISAbits.TRISA3 = 0;
   826  0011EA  9692               	bcf	3986,3,c	;volatile
   827                           
   828                           ;bitbang.c: 242: T0CON = 0;
   829  0011EC  0E00               	movlw	0
   830  0011EE  6ED5               	movwf	4053,c	;volatile
   831                           
   832                           ;bitbang.c: 243: TMR0L = 0;
   833  0011F0  0E00               	movlw	0
   834  0011F2  6ED6               	movwf	4054,c	;volatile
   835                           
   836                           ;bitbang.c: 244: T0CONbits.PSA = 0;
   837  0011F4  96D5               	bcf	4053,3,c	;volatile
   838                           
   839                           ;bitbang.c: 245: T0CONbits.T0PS2 = 0;
   840  0011F6  94D5               	bcf	4053,2,c	;volatile
   841                           
   842                           ;bitbang.c: 246: T0CONbits.T0PS1 = 1;
   843  0011F8  82D5               	bsf	4053,1,c	;volatile
   844                           
   845                           ;bitbang.c: 247: T0CONbits.T0PS0 = 0;
   846  0011FA  90D5               	bcf	4053,0,c	;volatile
   847                           
   848                           ;bitbang.c: 248: T0CONbits.T08BIT = 0;
   849  0011FC  9CD5               	bcf	4053,6,c	;volatile
   850                           
   851                           ;bitbang.c: 249: T0CONbits.TMR0ON = 1;
   852  0011FE  8ED5               	bsf	4053,7,c	;volatile
   853                           
   854                           ;bitbang.c: 250: TMR0 = 31536;
   855  001200  0E7B               	movlw	123
   856  001202  6ED7               	movwf	4055,c	;volatile
   857  001204  0E30               	movlw	48
   858  001206  6ED6               	movwf	4054,c	;volatile
   859                           
   860                           ;bitbang.c: 252: T1CONbits.TMR1ON = 0;
   861  001208  90CD               	bcf	4045,0,c	;volatile
   862                           
   863                           ;bitbang.c: 253: T1CONbits.T1CKPS0 = 1;
   864  00120A  88CD               	bsf	4045,4,c	;volatile
   865                           
   866                           ;bitbang.c: 254: T1CONbits.T1CKPS1 = 1;
   867  00120C  8ACD               	bsf	4045,5,c	;volatile
   868                           
   869                           ;bitbang.c: 255: PIE1bits.TMR1IE = 0;
   870  00120E  909D               	bcf	3997,0,c	;volatile
   871                           
   872                           ;bitbang.c: 256: T1CONbits.TMR1ON = 1;
   873  001210  80CD               	bsf	4045,0,c	;volatile
   874                           
   875                           ;bitbang.c: 259: INTCONbits.TMR0IF = 0;
   876  001212  94F2               	bcf	intcon,2,c	;volatile
   877                           
   878                           ;bitbang.c: 260: INTCONbits.TMR0IE = 1;
   879  001214  8AF2               	bsf	intcon,5,c	;volatile
   880                           
   881                           ;bitbang.c: 262: INTCONbits.GIE = 1;
   882  001216  8EF2               	bsf	intcon,7,c	;volatile
   883  001218  0012               	return		;funcret
   884  00121A                     __end_of_INIT_PIC:
   885                           	opt stack 0
   886                           tblptru	equ	0xFF8
   887                           tblptrh	equ	0xFF7
   888                           tblptrl	equ	0xFF6
   889                           tablat	equ	0xFF5
   890                           intcon	equ	0xFF2
   891                           postinc0	equ	0xFEE
   892                           wreg	equ	0xFE8
   893                           indf2	equ	0xFDF
   894                           fsr2h	equ	0xFDA
   895                           fsr2l	equ	0xFD9
   896                           status	equ	0xFD8
   897                           
   898 ;; *************** function _ISR *****************
   899 ;; Defined at:
   900 ;;		line 270 in file "bitbang.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;		None
   903 ;; Auto vars:     Size  Location     Type
   904 ;;  i               2   17[COMRAM] int 
   905 ;; Return value:  Size  Location     Type
   906 ;;                  1    wreg      void 
   907 ;; Registers used:
   908 ;;		wreg, status,2, status,0
   909 ;; Tracked objects:
   910 ;;		On entry : 0/0
   911 ;;		On exit  : 0/0
   912 ;;		Unchanged: 0/0
   913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   915 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   916 ;;      Temps:         17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   917 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   918 ;;Total ram usage:       19 bytes
   919 ;; Hardware stack levels used:    1
   920 ;; This function calls:
   921 ;;		Nothing
   922 ;; This function is called by:
   923 ;;		Interrupt level 2
   924 ;; This function uses a non-reentrant model
   925 ;;
   926                           
   927                           	psect	intcode
   928  000008                     __pintcode:
   929                           	opt stack 0
   930  000008                     _ISR:
   931                           	opt stack 28
   932                           
   933                           ;incstack = 0
   934  000008  8227               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   935  00000A  CFFA F004          	movff	pclath,??_ISR+3
   936  00000E  CFFB F005          	movff	pclatu,??_ISR+4
   937  000012  CFE9 F006          	movff	fsr0l,??_ISR+5
   938  000016  CFEA F007          	movff	fsr0h,??_ISR+6
   939  00001A  CFE1 F008          	movff	fsr1l,??_ISR+7
   940  00001E  CFE2 F009          	movff	fsr1h,??_ISR+8
   941  000022  CFD9 F00A          	movff	fsr2l,??_ISR+9
   942  000026  CFDA F00B          	movff	fsr2h,??_ISR+10
   943  00002A  CFF3 F00C          	movff	prodl,??_ISR+11
   944  00002E  CFF4 F00D          	movff	prodh,??_ISR+12
   945  000032  CFF6 F00E          	movff	tblptrl,??_ISR+13
   946  000036  CFF7 F00F          	movff	tblptrh,??_ISR+14
   947  00003A  CFF8 F010          	movff	tblptru,??_ISR+15
   948  00003E  CFF5 F011          	movff	tablat,??_ISR+16
   949                           
   950                           ;bitbang.c: 272: INTCONbits.TMR0IF = 0;
   951  000042  94F2               	bcf	intcon,2,c	;volatile
   952                           
   953                           ;bitbang.c: 273: LATCbits.LATC1 ^ = 1;
   954  000044  728B               	btg	3979,1,c	;volatile
   955                           
   956                           ;bitbang.c: 276: LATAbits.LATA0 = 1;
   957  000046  8089               	bsf	3977,0,c	;volatile
   958                           
   959                           ;bitbang.c: 277: LATAbits.LATA1 = 1;
   960  000048  8289               	bsf	3977,1,c	;volatile
   961                           
   962                           ;bitbang.c: 278: LATAbits.LATA2 = 1;
   963  00004A  8489               	bsf	3977,2,c	;volatile
   964                           
   965                           ;bitbang.c: 279: LATAbits.LATA3 = 1;
   966  00004C  8689               	bsf	3977,3,c	;volatile
   967                           
   968                           ;bitbang.c: 283: TMR1 = 63536;
   969  00004E  0EF8               	movlw	248
   970  000050  6ECF               	movwf	4047,c	;volatile
   971  000052  0E30               	movlw	48
   972  000054  6ECE               	movwf	4046,c	;volatile
   973  000056                     i2l81:
   974  000056  A09E               	btfss	3998,0,c	;volatile
   975  000058  D7FE               	goto	i2l81
   976                           
   977                           ;bitbang.c: 285: PIR1bits.TMR1IF = 0;
   978  00005A  909E               	bcf	3998,0,c	;volatile
   979                           
   980                           ;bitbang.c: 288: for (int i = 0; i < 180; i++) {
   981  00005C  0E00               	movlw	0
   982  00005E  6E13               	movwf	ISR@i+1,c
   983  000060  0E00               	movlw	0
   984  000062  6E12               	movwf	ISR@i,c
   985  000064                     i2l864:
   986  000064  BE13               	btfsc	ISR@i+1,7,c
   987  000066  D006               	goto	i2l868
   988  000068  5013               	movf	ISR@i+1,w,c
   989  00006A  E14F               	bnz	i2l890
   990  00006C  0EB4               	movlw	180
   991  00006E  5C12               	subwf	ISR@i,w,c
   992  000070  B0D8               	btfsc	status,0,c
   993  000072  D04B               	goto	i2l890
   994  000074                     i2l868:
   995                           
   996                           ;bitbang.c: 292: if (duty_cycle[0] < i)
   997  000074  501F               	movf	_duty_cycle,w,c
   998  000076  6E01               	movwf	??_ISR& (0+255),c
   999  000078  6A02               	clrf	(??_ISR+1)& (0+255),c
  1000  00007A  5012               	movf	ISR@i,w,c
  1001  00007C  5C01               	subwf	??_ISR,w,c
  1002  00007E  5002               	movf	??_ISR+1,w,c
  1003  000080  0A80               	xorlw	128
  1004  000082  6E03               	movwf	(??_ISR+2)& (0+255),c
  1005  000084  5013               	movf	ISR@i+1,w,c
  1006  000086  0A80               	xorlw	128
  1007  000088  5803               	subwfb	(??_ISR+2)& (0+255),w,c
  1008  00008A  B0D8               	btfsc	status,0,c
  1009  00008C  D002               	goto	i2l86
  1010                           
  1011                           ;bitbang.c: 293: LATAbits.LATA0 = 0;
  1012  00008E  9089               	bcf	3977,0,c	;volatile
  1013  000090  D001               	goto	i2l872
  1014  000092                     i2l86:
  1015                           
  1016                           ;bitbang.c: 294: else LATAbits.LATA0 = 1;
  1017  000092  8089               	bsf	3977,0,c	;volatile
  1018  000094                     i2l872:
  1019                           
  1020                           ;bitbang.c: 296: if (duty_cycle[1] < i)
  1021  000094  5020               	movf	_duty_cycle+1,w,c
  1022  000096  6E01               	movwf	??_ISR& (0+255),c
  1023  000098  6A02               	clrf	(??_ISR+1)& (0+255),c
  1024  00009A  5012               	movf	ISR@i,w,c
  1025  00009C  5C01               	subwf	??_ISR,w,c
  1026  00009E  5002               	movf	??_ISR+1,w,c
  1027  0000A0  0A80               	xorlw	128
  1028  0000A2  6E03               	movwf	(??_ISR+2)& (0+255),c
  1029  0000A4  5013               	movf	ISR@i+1,w,c
  1030  0000A6  0A80               	xorlw	128
  1031  0000A8  5803               	subwfb	(??_ISR+2)& (0+255),w,c
  1032  0000AA  B0D8               	btfsc	status,0,c
  1033  0000AC  D002               	goto	i2l88
  1034                           
  1035                           ;bitbang.c: 297: LATAbits.LATA1 = 0;
  1036  0000AE  9289               	bcf	3977,1,c	;volatile
  1037  0000B0  D001               	goto	i2l876
  1038  0000B2                     i2l88:
  1039                           
  1040                           ;bitbang.c: 298: else LATAbits.LATA1 = 1;
  1041  0000B2  8289               	bsf	3977,1,c	;volatile
  1042  0000B4                     i2l876:
  1043                           
  1044                           ;bitbang.c: 300: if (duty_cycle[2] < i)
  1045  0000B4  5021               	movf	_duty_cycle+2,w,c
  1046  0000B6  6E01               	movwf	??_ISR& (0+255),c
  1047  0000B8  6A02               	clrf	(??_ISR+1)& (0+255),c
  1048  0000BA  5012               	movf	ISR@i,w,c
  1049  0000BC  5C01               	subwf	??_ISR,w,c
  1050  0000BE  5002               	movf	??_ISR+1,w,c
  1051  0000C0  0A80               	xorlw	128
  1052  0000C2  6E03               	movwf	(??_ISR+2)& (0+255),c
  1053  0000C4  5013               	movf	ISR@i+1,w,c
  1054  0000C6  0A80               	xorlw	128
  1055  0000C8  5803               	subwfb	(??_ISR+2)& (0+255),w,c
  1056  0000CA  B0D8               	btfsc	status,0,c
  1057  0000CC  D002               	goto	i2l90
  1058                           
  1059                           ;bitbang.c: 301: LATAbits.LATA2 = 0;
  1060  0000CE  9489               	bcf	3977,2,c	;volatile
  1061  0000D0  D001               	goto	i2l880
  1062  0000D2                     i2l90:
  1063                           
  1064                           ;bitbang.c: 302: else LATAbits.LATA2 = 1;
  1065  0000D2  8489               	bsf	3977,2,c	;volatile
  1066  0000D4                     i2l880:
  1067                           
  1068                           ;bitbang.c: 304: if (duty_cycle[3] < i)
  1069  0000D4  5022               	movf	_duty_cycle+3,w,c
  1070  0000D6  6E01               	movwf	??_ISR& (0+255),c
  1071  0000D8  6A02               	clrf	(??_ISR+1)& (0+255),c
  1072  0000DA  5012               	movf	ISR@i,w,c
  1073  0000DC  5C01               	subwf	??_ISR,w,c
  1074  0000DE  5002               	movf	??_ISR+1,w,c
  1075  0000E0  0A80               	xorlw	128
  1076  0000E2  6E03               	movwf	(??_ISR+2)& (0+255),c
  1077  0000E4  5013               	movf	ISR@i+1,w,c
  1078  0000E6  0A80               	xorlw	128
  1079  0000E8  5803               	subwfb	(??_ISR+2)& (0+255),w,c
  1080  0000EA  B0D8               	btfsc	status,0,c
  1081  0000EC  D002               	goto	i2l92
  1082                           
  1083                           ;bitbang.c: 305: LATAbits.LATA3 = 0;
  1084  0000EE  9689               	bcf	3977,3,c	;volatile
  1085  0000F0  D001               	goto	i2l93
  1086  0000F2                     i2l92:
  1087                           
  1088                           ;bitbang.c: 306: else LATAbits.LATA3 = 1;
  1089  0000F2  8689               	bsf	3977,3,c	;volatile
  1090  0000F4                     i2l93:
  1091                           
  1092                           ;bitbang.c: 309: PIR1bits.TMR1IF = 0;
  1093  0000F4  909E               	bcf	3998,0,c	;volatile
  1094                           
  1095                           ;bitbang.c: 310: TMR1 = 65525;
  1096  0000F6  0EFF               	movlw	255
  1097  0000F8  6ECF               	movwf	4047,c	;volatile
  1098  0000FA  0EF5               	movlw	245
  1099  0000FC  6ECE               	movwf	4046,c	;volatile
  1100  0000FE                     i2l94:
  1101  0000FE  A09E               	btfss	3998,0,c	;volatile
  1102  000100  D7FE               	goto	i2l94
  1103                           
  1104                           ;bitbang.c: 312: PIR1bits.TMR1IF = 0;
  1105  000102  909E               	bcf	3998,0,c	;volatile
  1106  000104  4A12               	infsnz	ISR@i,f,c
  1107  000106  2A13               	incf	ISR@i+1,f,c
  1108  000108  D7AD               	goto	i2l864
  1109  00010A                     i2l890:
  1110                           
  1111                           ;bitbang.c: 313: }
  1112                           ;bitbang.c: 315: LATCbits.LATC1 ^= 1;
  1113  00010A  728B               	btg	3979,1,c	;volatile
  1114                           
  1115                           ;bitbang.c: 316: TMR0 = 31536;
  1116  00010C  0E7B               	movlw	123
  1117  00010E  6ED7               	movwf	4055,c	;volatile
  1118  000110  0E30               	movlw	48
  1119  000112  6ED6               	movwf	4054,c	;volatile
  1120  000114  C011  FFF5         	movff	??_ISR+16,tablat
  1121  000118  C010  FFF8         	movff	??_ISR+15,tblptru
  1122  00011C  C00F  FFF7         	movff	??_ISR+14,tblptrh
  1123  000120  C00E  FFF6         	movff	??_ISR+13,tblptrl
  1124  000124  C00D  FFF4         	movff	??_ISR+12,prodh
  1125  000128  C00C  FFF3         	movff	??_ISR+11,prodl
  1126  00012C  C00B  FFDA         	movff	??_ISR+10,fsr2h
  1127  000130  C00A  FFD9         	movff	??_ISR+9,fsr2l
  1128  000134  C009  FFE2         	movff	??_ISR+8,fsr1h
  1129  000138  C008  FFE1         	movff	??_ISR+7,fsr1l
  1130  00013C  C007  FFEA         	movff	??_ISR+6,fsr0h
  1131  000140  C006  FFE9         	movff	??_ISR+5,fsr0l
  1132  000144  C005  FFFB         	movff	??_ISR+4,pclatu
  1133  000148  C004  FFFA         	movff	??_ISR+3,pclath
  1134  00014C  9227               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1135  00014E  0011               	retfie		f
  1136  000150                     __end_of_ISR:
  1137                           	opt stack 0
  1138                           pclatu	equ	0xFFB
  1139                           pclath	equ	0xFFA
  1140                           tblptru	equ	0xFF8
  1141                           tblptrh	equ	0xFF7
  1142                           tblptrl	equ	0xFF6
  1143                           tablat	equ	0xFF5
  1144                           prodh	equ	0xFF4
  1145                           prodl	equ	0xFF3
  1146                           intcon	equ	0xFF2
  1147                           postinc0	equ	0xFEE
  1148                           fsr0h	equ	0xFEA
  1149                           fsr0l	equ	0xFE9
  1150                           wreg	equ	0xFE8
  1151                           fsr1h	equ	0xFE2
  1152                           fsr1l	equ	0xFE1
  1153                           indf2	equ	0xFDF
  1154                           fsr2h	equ	0xFDA
  1155                           fsr2l	equ	0xFD9
  1156                           status	equ	0xFD8
  1157                           pclatu	equ	0xFFB
  1158                           pclath	equ	0xFFA
  1159                           tblptru	equ	0xFF8
  1160                           tblptrh	equ	0xFF7
  1161                           tblptrl	equ	0xFF6
  1162                           tablat	equ	0xFF5
  1163                           prodh	equ	0xFF4
  1164                           prodl	equ	0xFF3
  1165                           intcon	equ	0xFF2
  1166                           postinc0	equ	0xFEE
  1167                           fsr0h	equ	0xFEA
  1168                           fsr0l	equ	0xFE9
  1169                           wreg	equ	0xFE8
  1170                           fsr1h	equ	0xFE2
  1171                           fsr1l	equ	0xFE1
  1172                           indf2	equ	0xFDF
  1173                           fsr2h	equ	0xFDA
  1174                           fsr2l	equ	0xFD9
  1175                           status	equ	0xFD8
  1176                           
  1177                           	psect	rparam
  1178  0000                     pclatu	equ	0xFFB
  1179                           pclath	equ	0xFFA
  1180                           tblptru	equ	0xFF8
  1181                           tblptrh	equ	0xFF7
  1182                           tblptrl	equ	0xFF6
  1183                           tablat	equ	0xFF5
  1184                           prodh	equ	0xFF4
  1185                           prodl	equ	0xFF3
  1186                           intcon	equ	0xFF2
  1187                           postinc0	equ	0xFEE
  1188                           fsr0h	equ	0xFEA
  1189                           fsr0l	equ	0xFE9
  1190                           wreg	equ	0xFE8
  1191                           fsr1h	equ	0xFE2
  1192                           fsr1l	equ	0xFE1
  1193                           indf2	equ	0xFDF
  1194                           fsr2h	equ	0xFDA
  1195                           fsr2l	equ	0xFD9
  1196                           status	equ	0xFD8
  1197                           
  1198                           	psect	temp
  1199  000027                     btemp:
  1200                           	opt stack 0
  1201  000027                     	ds	1
  1202  0000                     int$flags	set	btemp
  1203                           pclatu	equ	0xFFB
  1204                           pclath	equ	0xFFA
  1205                           tblptru	equ	0xFF8
  1206                           tblptrh	equ	0xFF7
  1207                           tblptrl	equ	0xFF6
  1208                           tablat	equ	0xFF5
  1209                           prodh	equ	0xFF4
  1210                           prodl	equ	0xFF3
  1211                           intcon	equ	0xFF2
  1212                           postinc0	equ	0xFEE
  1213                           fsr0h	equ	0xFEA
  1214                           fsr0l	equ	0xFE9
  1215                           wreg	equ	0xFE8
  1216                           fsr1h	equ	0xFE2
  1217                           fsr1l	equ	0xFE1
  1218                           indf2	equ	0xFDF
  1219                           fsr2h	equ	0xFDA
  1220                           fsr2l	equ	0xFD9
  1221                           status	equ	0xFD8


Data Sizes:
    Strings     101
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     30      38
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_8(CODE[3]), STR_7(CODE[17]), STR_6(CODE[19]), STR_5(CODE[8]), 
		 -> STR_4(CODE[7]), STR_3(CODE[15]), STR_2(CODE[32]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_putch

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     691
                                             28 COMRAM     2     2      0
                           _INIT_PIC
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              20    16      4     665
                                             20 COMRAM     8     4      4
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      15
                                             19 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _INIT_PIC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 19    19      0      90
                                              0 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _INIT_PIC
   _printf
     _putch

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1E      26       1       40.4%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      26      12        0.0%
DATA                 0      0      26       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Sat Apr 09 22:48:28 2016

                     l69 1128                      l100 1236                      l900 116C  
                    l902 1172                      l910 118E                      l912 11B0  
                    l906 1186                      l930 108C                      l932 10BE  
                    l924 1080                      l934 10CC                      l942 10F0  
                    l926 1084                      l944 1106                      l954 1132  
                    l946 1114                      l938 10DC                      l956 1142  
                    l896 115C                      _ISR 0008                      wreg 000FE8  
             _TXSTA2bits 000F72             __CFG_LVP$OFF 000000                     ?_ISR 0001  
                   ISR@i 0012                     STR_1 101E                     STR_2 1001  
                   STR_3 1045                     STR_4 105C                     STR_5 1054  
                   STR_6 1021                     STR_7 1034                     STR_8 1063  
          __CFG_DEBUG$ON 000000                     i2l81 0056                     i2l90 00D2  
                   i2l92 00F2                     i2l93 00F4                     i2l94 00FE  
                   i2l86 0092                     i2l88 00B2                     _TMR0 000FD6  
                   _TMR1 000FCE             __CFG_WDTPS$1 000000                     _main 1068  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr0l 000FE9  
                   fsr2h 000FDA                     fsr1l 000FE1                     indf2 000FDF  
                   fsr2l 000FD9                     btemp 0027            __CFG_BORV$285 000000  
                   pclat 000FFA                     prodh 000FF4                     prodl 000FF3  
                   start 0150            __CFG_IESO$OFF 000000             ___param_bank 000010  
                  ??_ISR 0001             _BAUDCON2bits 000F70         __end_of_INIT_PIC 121A  
                  ?_main 0001                    _T0CON 000FD5                    i2l880 00D4  
                  i2l872 0094                    i2l864 0064                    i2l890 010A  
                  i2l876 00B4                    i2l868 0074                    _TMR0L 000FD6  
                  _TX2IF 007D24           __CFG_FCMEN$OFF 000000       __CFG_MCLRE$EXTMCLR 000000  
                  _putch 1234           __CFG_BOREN$OFF 000000                    tablat 000FF5  
                  status 000FD8          __initialization 121A             __end_of_main 1152  
                 ??_main 001D            __activetblptr 000002           __CFG_PLLCFG$ON 000000  
          main@direction 001E                   ?_putch 0001           __CFG_WDTEN$OFF 000000  
                 _RCREG2 000F74                   _SPBRG2 000F75                   _TX2REG 000F73  
         __CFG_PWRTEN$ON 000000           __CFG_XINST$OFF 000000                   clear_0 1220  
                 _printf 1152             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   putch@c 0014  
        __CFG_HFOFST$OFF 000000               __accesstop 0060  __end_of__initialization 1226  
        __CFG_PBADEN$OFF 000000                ?_INIT_PIC 0001            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_putch 1240                  ??_putch 0014  
             ??_INIT_PIC 0014       __CFG_CCP2MX$PORTC1 000000       __CFG_CCP3MX$PORTB5 000000  
                ?_printf 0015        __CFG_PRICLKEN$OFF 000000      main@direction_state 001D  
                __Hparam 0000                  __Lparam 0000             __psmallconst 1000  
        __CFG_STVREN$OFF 000000                  __pcinit 121A                  __ramtop 1000  
                __ptext0 1068                  __ptext1 1152                  __ptext2 1234  
                __ptext3 11CA          __size_of_printf 0078                _T0CONbits 000FD5  
           __size_of_ISR 0148                _T1CONbits 000FCD               _duty_cycle 001F  
   end_of_initialization 1226            __Lmediumconst 0000                  printf@c 001C  
                printf@f 0015                  postinc0 000FEE                _TRISAbits 000F92  
              _TRISCbits 000F94        __size_of_INIT_PIC 0050           __end_of_printf 11CA  
    start_initialization 121A              __end_of_ISR 0150                 ??_printf 0019  
            __pbssCOMRAM 001F                __pintcode 0008              __smallconst 1000  
         __size_of_putch 000C                 _LATAbits 000F89                 _LATCbits 000F8B  
               _INIT_PIC 11CA                 _PIE1bits 000F9D                 _PIR1bits 000F9E  
               _PIR3bits 000FA4               printf@flag 0019                 __Hrparam 0000  
               __Lrparam 0000        __CFG_P2BMX$PORTC0 000000            __size_of_main 00EA  
               int$flags 0027              _OSCTUNEbits 000F9B               _INTCONbits 000FF2  
               intlevel2 0000               _RCSTA2bits 000F71               _OSCCONbits 000FD3  
               printf@ap 001A        __CFG_T3CMX$PORTC0 000000        __CFG_FOSC$INTIO67 000000  
            _pwm_channel 0023  
